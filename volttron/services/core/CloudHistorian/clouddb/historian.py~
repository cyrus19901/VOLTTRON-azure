from __future__ import absolute_import, print_function

import logging
import sys

import pymongo
from bson.objectid import ObjectId
from pymongo import InsertOne, ReplaceOne
from pymongo.errors import BulkWriteError

from volttron.platform.agent import utils
from volttron.platform.agent.base_historian import BaseHistorian

utils.setup_logging()
_log = logging.getLogger(__name__)
__version__ = '0.1'


#def historian(config_path, **kwargs):
#    config = utils.load_config(config_path)
#    connection = config.get('connection', None)
#    assert connection is not None

#    database_type = connection.get('type', None)
#    assert database_type is not None

#    params = connection.get('params', None)
#    assert params is not None

#    identity = config.get('identity', kwargs.pop('identity', None))
#    topic_replacements = config.get('topic_replace_list', None)
#    _log.debug('topic_replacements are: {}'.format(topic_replacements))
#-------------------------------------------------------------------------------
#The new Agent must implement the following method:

# :py:meth:`BaseHistorian.publish_to_historian`

#Optionally the following methods may be implemented to support querying:

#- :py:meth:`BaseHistorian.query_topic_list`
#- :py:meth:`BaseHistorian.query_historian`
#--------------------------------------------------------------------------------
    class CloudHistorian(BaseHistorian):
        """This is a simple example of a historian agent that writes stuff
        to a SQLite database. It is designed to test some of the functionality
        of the BaseHistorianAgent.
        """

        def publish_to_historian(self, to_publish_list):
            _log.debug("publish_to_historian number of items: {}"
                       .format(len(to_publish_list)))

            # Use the db instance to insert/update the topics
            # and data collections
            db = self._client.get_default_database()

            bulk_publish = []
            for x in to_publish_list:
                ts = x['timestamp']
                topic = x['topic']
                value = x['value']
                meta = x['meta']
		print("coming to the historian")

def main(argv=sys.argv):
    """Main method called by the eggsecutable.
    @param argv:
    """
    try:
        utils.vip_main(historian)
    except Exception as e:
        print(e)
        _log.exception('unhandled exception')


if __name__ == '__main__':
    # Entry point for script
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        pass
